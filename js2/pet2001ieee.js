//
// Copyright (c) 2015 Thomas Skibo.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//	  notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//	  notice, this list of conditions and the following disclaimer in the
//	  documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.	IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//
// pet2001ieee.js
// IEEE bus and device emulation
//
// Modified by Norbert Landsteiner 2017-2023.
//

function PetIEEE() {

	// controller called for external file handling
	var fileController = null;

	// State machine
	var STATE_IDLE = 0,
		STATE_LISTEN = 1,
		STATE_FNAME = 2,
		STATE_LOAD = 3,
		STATE_SAVE = 4,
		STATE_SAVE1 = 5;
	var state = STATE_IDLE;

	// signals
	var dio = 0x00,
		ndac_i = true,
		ndac_o = true,
		nrfd_i = true,
		nrfd_o = true,
		atn = true,
		dav_i = true,
		dav_o = true,
		srq = true,
		eoi_i = true,
		eoi_o = true;

	var MY_ADDRESS = 8,
		filename,
		oldRom = false,
		data_index,
		save_data,
		oldRomDataStartAddress,
		oldRomDataEndAddress,
		SENDER_TIMEOUT = 64000,
		senderTimeout;

	var initial_file_data = [
		0x01,0x04,
		0x25,0x04,0x64,0x00,0x8F,0x20,0x2A,0x2A,0x20,0x57,0x45,0x4C,0x43,0x4F,0x4D,0x45,
		0x20,0x54,0x4F,0x20,0x54,0x48,0x45,0x20,0x50,0x45,0x54,0x20,0x32,0x30,0x30,0x31,
		0x20,0x2A,0x2A,0x00,0x5B,0x04,0x65,0x00,0x97,0x20,0x35,0x39,0x34,0x36,0x38,0x2C,
		0x31,0x32,0x3A,0x99,0x22,0x93,0x20,0x20,0x20,0x20,0x20,0x2A,0x2A,0x20,0x57,0x45,
		0x4C,0x43,0x4F,0x4D,0x45,0x20,0x54,0x4F,0x20,0x54,0x48,0x45,0x20,0x50,0x45,0x54,
		0x20,0x32,0x30,0x30,0x31,0x20,0x2A,0x2A,0x22,0x00,0x8D,0x04,0x66,0x00,0x99,0x22,
		0x11,0x50,0x4C,0x45,0x41,0x53,0x45,0x20,0x45,0x49,0x54,0x48,0x45,0x52,0x20,0x4D,
		0x4F,0x55,0x4E,0x54,0x20,0x41,0x20,0x46,0x49,0x4C,0x45,0x20,0x56,0x49,0x41,0x20,
		0x54,0x48,0x45,0x20,0x4D,0x4F,0x55,0x4E,0x54,0x22,0x3B,0x00,0xC7,0x04,0x67,0x00,
		0x99,0x22,0x42,0x55,0x54,0x54,0x4F,0x4E,0x20,0x41,0x4E,0x44,0x20,0x54,0x48,0x45,
		0x4E,0x20,0x54,0x59,0x50,0x45,0x2C,0x20,0x27,0x4C,0x4F,0x41,0x44,0x20,0x22,0xC7,
		0x28,0x33,0x34,0x29,0x22,0x2A,0x22,0xC7,0x28,0x33,0x34,0x29,0x22,0x2C,0x38,0x27,
		0x2C,0x20,0x4F,0x52,0x22,0x00,0xF6,0x04,0x68,0x00,0x99,0x22,0x4A,0x55,0x53,0x54,
		0x20,0x44,0x52,0x4F,0x50,0x20,0x41,0x20,0x46,0x49,0x4C,0x45,0x20,0x4F,0x4E,0x54,
		0x4F,0x20,0x54,0x48,0x45,0x20,0x50,0x45,0x54,0x27,0x53,0x20,0x53,0x43,0x52,0x45,
		0x45,0x4E,0x2E,0x22,0x00,0x25,0x05,0x69,0x00,0x99,0x22,0x11,0x44,0x52,0x4F,0x50,
		0x50,0x45,0x44,0x20,0x46,0x49,0x4C,0x45,0x53,0x20,0x57,0x49,0x4C,0x4C,0x20,0x4C,
		0x4F,0x41,0x44,0x20,0x41,0x55,0x54,0x4F,0x4D,0x41,0x54,0x49,0x43,0x41,0x4C,0x4C,
		0x59,0x2C,0x22,0x00,0x62,0x05,0x6A,0x00,0x99,0x22,0x42,0x49,0x4E,0x41,0x52,0x59,
		0x20,0x22,0xC7,0x28,0x33,0x34,0x29,0x22,0x50,0x52,0x47,0x22,0xC7,0x28,0x33,0x34,
		0x29,0x22,0x20,0x46,0x49,0x4C,0x45,0x53,0x20,0x57,0x49,0x4C,0x4C,0x20,0x41,0x4C,
		0x53,0x4F,0x20,0x53,0x54,0x41,0x52,0x54,0x20,0x41,0x55,0x54,0x4F,0x2D,0x22,0x3B,
		0x00,0x74,0x05,0x6B,0x00,0x99,0x22,0x4D,0x41,0x54,0x49,0x43,0x41,0x4C,0x4C,0x59,
		0x2E,0x22,0x00,0xB0,0x05,0x6C,0x00,0x99,0x22,0x53,0x45,0x45,0x20,0x54,0x48,0x45,
		0x20,0x22,0xC7,0x28,0x33,0x34,0x29,0x22,0x50,0x52,0x47,0x20,0x4C,0x49,0x42,0x52,
		0x41,0x52,0x59,0x22,0xC7,0x28,0x33,0x34,0x29,0x22,0x20,0x46,0x4F,0x52,0x20,0x47,
		0x41,0x4D,0x45,0x53,0x20,0x26,0x20,0x4D,0x4F,0x52,0x45,0x2E,0x11,0x22,0x00,0xD3,
		0x05,0x6D,0x00,0x99,0xA6,0x31,0x31,0x29,0x22,0x20,0x20,0x20,0xB0,0xC0,0xC0,0xC0,
		0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xAE,0x20,0x20,0x20,0x20,0x20,0x20,0xCF,0xD0,0xCD,
		0x22,0x00,0xF6,0x05,0x6E,0x00,0x99,0xA6,0x31,0x31,0x29,0x22,0x20,0x20,0x20,0xC2,
		0xD5,0xC3,0xC4,0xC5,0xC5,0xC5,0xC4,0xC3,0xC9,0xC8,0x20,0x20,0x20,0x20,0x20,0x20,
		0xA5,0x20,0xD0,0x22,0x00,0x19,0x06,0x6F,0x00,0x99,0xA6,0x31,0x31,0x29,0x22,0x20,
		0x20,0x20,0xC7,0xC2,0x20,0x20,0xAF,0x20,0xAF,0x20,0x20,0xC8,0xD9,0x20,0x20,0x20,
		0x20,0x20,0x20,0xCC,0xA4,0xBA,0x22,0x00,0x33,0x06,0x70,0x00,0x99,0xA6,0x31,0x31,
		0x29,0x22,0x20,0x20,0x20,0xD4,0xC7,0x20,0x20,0xAC,0x20,0xBB,0x20,0x20,0xD9,0xA7,
		0x22,0x00,0x58,0x06,0x71,0x00,0x99,0xA6,0x31,0x31,0x29,0x22,0x20,0x20,0x20,0xA5,
		0xC7,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xD9,0x20,0xA5,0x20,0x20,0x44,0x52,0x41,
		0x47,0x20,0x41,0x4E,0x44,0x22,0x00,0x7E,0x06,0x72,0x00,0x99,0xA6,0x31,0x31,0x29,
		0x22,0x20,0x20,0xA7,0x20,0xC7,0x20,0x20,0x20,0xA4,0x20,0x20,0x20,0xD9,0x20,0xD4,
		0xC4,0xC4,0x44,0x52,0x4F,0x50,0x20,0x48,0x45,0x52,0x45,0x22,0x00,0x99,0x06,0x73,
		0x00,0x99,0xA6,0x31,0x31,0x29,0x22,0x20,0x20,0xD9,0x20,0xC2,0x20,0x20,0x20,0xB8,
		0x20,0x20,0x20,0xC8,0x20,0xC7,0x22,0x00,0xB4,0x06,0x74,0x00,0x99,0xA6,0x31,0x31,
		0x29,0x22,0x20,0x20,0xC8,0x20,0xCA,0xC6,0xD2,0xA4,0xA4,0xA4,0xD2,0xC6,0xCB,0x20,
		0xC2,0x22,0x00,0xCF,0x06,0x75,0x00,0x99,0xA6,0x31,0x31,0x29,0x22,0x20,0x20,0xAD,
		0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xBD,0x22,0x00,0xEC,0x06,
		0x76,0x00,0x99,0xA6,0x31,0x31,0x29,0x22,0x20,0x12,0xAC,0xA2,0xA2,0xA2,0xA2,0xA2,
		0xA2,0xA2,0xA2,0xA2,0xA2,0xA2,0xA2,0xA2,0xBB,0x22,0x00,0x0B,0x07,0x77,0x00,0x99,
		0xA6,0x31,0x31,0x29,0x22,0xA7,0xA1,0x43,0x3D,0x20,0x20,0x20,0x50,0x45,0x54,0x20,
		0x32,0x30,0x30,0x31,0x12,0xA1,0x92,0xA5,0x22,0x00,0x2C,0x07,0x78,0x00,0x99,0xA6,
		0x31,0x31,0x29,0x22,0xAA,0x12,0xBC,0x92,0xA2,0xA2,0xA2,0xA2,0xA2,0xA2,0xA2,0xA2,
		0xA2,0xA2,0xA2,0xA2,0xA2,0x12,0xBE,0x92,0xB4,0x22,0x00,0x4A,0x07,0x79,0x00,0x99,
		0xA6,0x31,0x31,0x29,0x22,0x20,0xA8,0xA8,0xA8,0xA8,0xA8,0xA8,0xA8,0xA8,0xA8,0xA8,
		0xA8,0xA8,0xA8,0xA8,0xA8,0x91,0x91,0x22,0x00,0x00,0x00
	];
	var load_data = initial_file_data, fileBackup;

	this.connect = function(components) {
		fileController = components.controller;
	};

	this.ieeeLoadData = function(addr, bytes, isTemporary) {
		fileBackup = isTemporary? load_data:null;
		oldRomDataStartAddress = addr;
		oldRomDataEndAddress = addr + bytes.length;
		load_data = [ addr & 0xff, addr >> 8 ].concat(bytes);
	};

	this.resetLoadData = function() {
		load_data = initial_file_data;
		data_index = 0;
	};

	function dataIn(d8) {
		// console.log("Data: " + d8.toString(16) + " ATN: " +
		//			 atn.toString() + " EOI: " + (eoi_i && eoi_o).toString());
		if (!atn) {
			switch (state) {
			case STATE_IDLE:
				if (d8 == 0x20 + MY_ADDRESS)
					state = STATE_LISTEN;
				else if (d8 == 0x40 + MY_ADDRESS) {
					oldRom = false;
					state = STATE_LOAD;
					fileController.loadFromMountedMedia(filename);
					fileController._setFileActivityIndicator(true);
				}
				else if (d8 == 0x7f && filename.length > 0 &&
						 load_data.length > 2) {
					// Old PET ROMs LOAD.
					// Assume program starts at either 0x0400 or 0x0401.
					data_index = load_data[0] == 0 ? 2 : 1;

					// Put first data on bus.
					dio = load_data[data_index] ^ 0xff;
					dav_i = false;

					oldRom = true;
					state = STATE_LOAD;
					fileController.loadFromMountedMedia(filename);
					fileController._setFileActivityIndicator(true);
				}
				else if (d8 == 0x3f && filename.length > 0) {
					// Old PET ROMs SAVE.
					oldRom = true;
					save_data = "";
					state = STATE_SAVE1;
				}
				break;
			case STATE_LISTEN:
				// UNListen
				if (d8 == 0x3f)
					state = STATE_IDLE;
				// LOAD or SAVE
				else if (d8 == 0xf0 || d8 == 0xf1) {
					filename = "";
					data_index = 0;
					state = STATE_FNAME;
				}
				else if (d8 == 0x61) {
					save_data = "";
					state = STATE_SAVE;
				}
				break;
			case STATE_FNAME:
				// UNListen
				if (d8 == 0x3f)
					state = STATE_IDLE;
				break;
			case STATE_LOAD:
				// UNTalk
				if (d8 == 0x5f) {
					state = STATE_IDLE;
					fileController._setFileActivityIndicator(false);
					if (fileBackup) {
						load_data = fileBackup;
						fileBackup = null;
					}
				}
				break;
			case STATE_SAVE:
				// UNListen
				if (d8 == 0x3f) {
					fileController.saveFile(filename, save_data);
					state = STATE_IDLE;
				}
				break;
			case STATE_SAVE1:
				if (eoi_o) {
					// Data comes with ATN low in old ROMs.
					save_data += String.fromCharCode(d8);
					data_index++;
					// console.log("Save Data: " + d8.toString(16));
				}
				else {
					// Ignore last byte.
					// console.log("Save EOI");
					save_data = String.fromCharCode(0) +
						String.fromCharCode(4) + save_data;
					fileController.saveFile(filename, save_data);
					oldRom = false;
					state = STATE_IDLE;
				}
			}
		}
		else {
			switch (state) {
			case STATE_FNAME:
				filename += String.fromCharCode(d8);
				// if (!eoi_o)
				//	  console.log("Filename: " + filename);
				break;
			case STATE_SAVE:
				save_data += String.fromCharCode(d8);
				data_index++;
				// console.log("Save Data: " + d8.toString(16));
				// if (!eoi_o)
				//	 console.log("Save EOI");
				break;
			}
		}
	};

	this.reset = function() {
		state = STATE_IDLE;
		filename = "";
		save_data = "";
		oldRom = false;
		data_index = 0;
		senderTimeout = 0;
		if (!load_data || load_data.length == 0) load_data = initial_file_data;
		if (fileController && fileController._setFileActivityIndicator)
			fileController._setFileActivityIndicator(false);
		if (fileBackup) {
			load_data = fileBackup;
			fileBackup = null;
		}
	};

	this.DIOout = function (d8) {
		// if (dio != d8)
		//	 console.log("PetIEEE.DIOout: ", d8, String.fromCharCode(d8)||'');
		dio = d8;
	};

	this.DIOin = function() {
		// console.log("PetIEEE.DIOin: ", dio);
		return dio;
	};

	this.NDACin = function() {
		// console.log("PetIEEE.NDACin");
		return ndac_i && ndac_o;
	};

	this.NDACout = function(flag) {
		// if (ndac_o != flag)
		//	  console.log("PetIEEE.NDACout: ", flag);
		if (!ndac_o && flag) {
			// Positive transition of NDAC.	 Data acknowledged.
			if (state == STATE_LOAD) {
				dav_i = true;
				eoi_i = true;
				data_index++;
				if (data_index == load_data.length) {
					senderTimeout = 0;
					if (oldRom) {
						//alert("Load completed.  You must hit STOP.");
						state = STATE_IDLE;
						fileController._oldRomIEEELoadComplete(oldRomDataStartAddress, oldRomDataEndAddress);
					}
				}
				else {
					senderTimeout = SENDER_TIMEOUT;
				}
			}
		}
		ndac_o = flag;
	};

	this.NRFDin = function() {
		// console.log("PetIEEE.NRFDin");
		return nrfd_i && nrfd_o;
	};

	this.NRFDout = function(flag) {
		// if (nrfd_o != flag)
		//	  console.log("PetIEEE.NRFDout: ", flag);
		if (!nrfd_o && flag) {
			// Positive transition of NRFD.	 Put data on bus.
			if (state == STATE_LOAD && data_index < load_data.length) {
				dio = load_data[data_index] ^ 0xff;
				dav_i = false;
				// console.log("LoadData: " + (dio ^ 0xff).toString(16));
				if (data_index == load_data.length - 1) {
					// console.log("LoadData EOI");
					eoi_i = false;
				}
			}
		}
		nrfd_o = flag;
	};

	this.EOIin = function() {
		// console.log("PetIEEE.EOIin");
		return eoi_i && eoi_o;
	};

	this.EOIout = function(flag) {
		// if (eoi_o != flag)
		//	  console.log("PetIEEE.EOIout: ", flag);
		eoi_o = flag;
	}

	this.ATNout = function(flag) {
		// if (atn != flag)
		//	  console.log("PetIEEE.ATNout: ", flag);
		if (atn && !flag) {
			// Negative transition of ATN
			ndac_i = false;
		}
		else if (!atn && flag) {
			// Positive transition of ATN
			if (state == STATE_LOAD && nrfd_o) {
				// Put first data on bus.
				dio = load_data[0] ^ 0xff;
				dav_i = false;
				senderTimeout = SENDER_TIMEOUT;
				fileController._setFileActivityIndicator(true);
			}
		}
		atn = flag;
	};

	this.DAVout = function(flag) {
		// if (dav_o != flag)
		//	 console.log("PetIEEE.DAVout: ", flag);
		if (dav_o && !flag) {
			// Negative transition of DAV.
			ndac_i = true;
			nrfd_i = false;
			dataIn(dio ^ 0xff);
		}
		else if (!dav_o && flag) {
			// Positive transition of DAV.
			ndac_i = false;
			nrfd_i = true;
		}
		dav_o = flag;
	};

	this.DAVin = function() {
		// console.log("PetIEEE.DAVin");
		return dav_i && dav_o;
	};

	this.SRQin = function() {
		// console.log("PetIEEE.SRQin");
		return srq;
	};

	this.checkTimeout = function() {
		if (state == STATE_LOAD && senderTimeout && --senderTimeout == 0) {
			this.reset();
		}
	};
}

